{"version":3,"sources":["Containers/App/App.module.scss","Containers/Hall/Hall.module.scss","Containers/Leaderboard/Leaderboard.module.scss","components/Button/Button.module.scss","images/default.jpg","components/Button/index.js","components/Button/Button.jsx","firebase.js","components/Image/Image.jsx","Containers/Images/index.js","Containers/Images/Images.jsx","Containers/Game/Game.jsx","components/UserInput/index.js","components/UserInput/UserInput.jsx","Containers/Hall/index.js","Containers/Hall/Hall.jsx","Containers/Leaderboard/index.js","Containers/Leaderboard/Leaderboard.jsx","Containers/App/index.js","Containers/App/App.js","serviceWorker.js","index.js","Containers/Game/Game.module.scss"],"names":["module","exports","Button","className","styles","button","onClick","this","props","text","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","provider","GoogleAuthProvider","Image","state","rotationValue","randomNumber360","scale","randomNumber2","color","firstRandomNumber255","secondRandomNumber255","thirdRandomNumber255","resetTransformations","isCorrected","index","setState","handleImageClick","randomRotation","numRows","Math","floor","sqrt","numImages","transformation","transform","width","height","backgroundColor","style","src","alt","Images","correctedArray","boolean","image","user","photoURL","randNum","max","ceil","random","innerHtml","push","key","Game","difficulty","isStopwatchRunning","status","runningTime","winStatus","scores","subWinStatus","checkWinStatus","console","log","alert","type","collection","doc","set","displayName","finishTime","then","catch","error","handleReset","stopwatchStatus","handleClick","concat","clearInterval","timer","startTime","Date","now","setInterval","filter","booleanValue","length","addButtons","map","initializeGame","buttons","addImages","mainContent","activate","isActive","UserInput","onChange","handleChange","Hall","html","form","setInputValue","Leaderboard","filteredScores","chosenDifficulty","getScores","get","querySnapshot","orderedScores","docs","data","docId","id","sort","a","b","leaderboardDifficulty","selectDifficulty","score","instruction","leaderboardRow","App","rotation","signIn","auth","signInWithPopup","result","globalHistory","navigate","signInDefault","require","event","target","value","welcome","to","textDecoration","path","logIn","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ab7cdfd1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logIn\":\"App_logIn__7Rynr\",\"welcome\":\"App_welcome__2EYGT\",\"buttons\":\"App_buttons__23GPN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Hall_mainContent__31o2l\",\"form\":\"Hall_form__1o01v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderboardRow\":\"Leaderboard_leaderboardRow__4Zeym\",\"buttons\":\"Leaderboard_buttons__1ycdw\",\"button\":\"Leaderboard_button__1_RSB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__19xhJ\"};","module.exports = __webpack_public_path__ + \"static/media/default.97569f09.jpg\";","import Button from \"./Button\";\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport styles from \"./Button.module.scss\";\r\n\r\nclass Login extends React.Component {\r\n  render() {\r\n    return (\r\n      <button className={styles.button} onClick={this.props.onClick}>\r\n        {this.props.text}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAJ71l4tlltc5zr2VIFN3a92qU_qgbBvRE\",\r\n  authDomain: \"hall-of-mirrors-4ea96.firebaseapp.com\",\r\n  databaseURL: \"https://hall-of-mirrors-4ea96.firebaseio.com\",\r\n  projectId: \"hall-of-mirrors-4ea96\",\r\n  storageBucket: \"hall-of-mirrors-4ea96.appspot.com\",\r\n  messagingSenderId: \"554567970977\",\r\n  appId: \"1:554567970977:web:8a15a6f2b9fb3e3e8c00e0\",\r\n  measurementId: \"G-MPEPWF91N4\"\r\n};\r\n\r\n// Initialising firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Exporting connection to database as a variable\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Image extends Component {\r\n  state = {\r\n    rotationValue: this.props.randomNumber360,\r\n    scale: this.props.randomNumber2,\r\n    color: `rgb(${this.props.firstRandomNumber255}, ${this.props.secondRandomNumber255}, ${this.props.thirdRandomNumber255})`\r\n  };\r\n  resetTransformations = () => {\r\n    if (this.state.rotationValue !== 0) {\r\n      this.props.isCorrected(this.props.index, true);\r\n      this.setState({ rotationValue: 0, scale: 1, color: \"transparent\" });\r\n      this.props.handleImageClick();\r\n    } else {\r\n      this.props.isCorrected(this.props.index, false);\r\n      this.setState({\r\n        rotationValue: this.props.randomNumber360,\r\n        scale: this.props.randomNumber2,\r\n        color: `rgb(${this.props.firstRandomNumber255}, ${this.props.secondRandomNumber255}, ${this.props.thirdRandomNumber255})`\r\n      });\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let randomRotation = `rotate(${this.state.rotationValue}deg)`;\r\n    let numRows = Math.floor(Math.sqrt(this.props.numImages));\r\n    // here I am finding the heighest square number less than my number of images, to obtain a reasonable number of rows for the required number of images to be set across\r\n    let width = `${(100 * numRows * this.state.scale) /\r\n      this.props.numImages}vh`;\r\n    // now I'm taking the full viewport width multiplied by the number of rows set across, and dividing this by the number of images I want in a row to obtain an appropriate viewport width for each image to take up\r\n    let height = \"auto\";\r\n    let transformation = {\r\n      transform: randomRotation,\r\n      width,\r\n      height\r\n    };\r\n\r\n    let color = {\r\n      backgroundColor: this.state.color\r\n    };\r\n\r\n    return (\r\n      <div style={color}>\r\n        <img\r\n          src={this.props.src}\r\n          alt=\"display\"\r\n          style={transformation}\r\n          onClick={this.resetTransformations}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import Images from \"./Images\";\r\n\r\nexport default Images;\r\n","import React, { Component } from \"react\";\r\nimport Image from \"../../components/Image/Image\";\r\n\r\nclass Images extends Component {\r\n  state = { correctedArray: this.props.correctedArray };\r\n  isCorrected = (index, boolean) => {\r\n    const correctedArray = this.state.correctedArray;\r\n    correctedArray[index] = boolean;\r\n    this.setState({ correctedArray });\r\n  };\r\n  render() {\r\n    let image =\r\n      this.props.user !== null\r\n        ? this.props.user.photoURL\r\n        : \"../../images/default\";\r\n\r\n    let randNum = max => {\r\n      return Math.ceil(Math.random() * max);\r\n    };\r\n    let innerHtml = [];\r\n    for (let index = 0; index < this.props.numImages; index++) {\r\n      innerHtml.push(\r\n        <Image\r\n          src={image}\r\n          alt=\"display\"\r\n          key={index}\r\n          randomNumber360={randNum(360)}\r\n          randomNumber2={randNum(2)}\r\n          firstRandomNumber255={randNum(255)}\r\n          secondRandomNumber255={randNum(255)}\r\n          thirdRandomNumber255={randNum(255)}\r\n          numImages={this.props.numImages}\r\n          isCorrected={this.isCorrected}\r\n          index={index}\r\n          handleImageClick={this.props.handleImageClick}\r\n        />\r\n      );\r\n    }\r\n\r\n    return <>{innerHtml}</>;\r\n  }\r\n}\r\n\r\nexport default Images;\r\n","import React, { Component } from \"react\";\r\nimport styles from \"./Game.module.scss\";\r\nimport Button from \"../../components/Button\";\r\nimport Images from \"../Images\";\r\nimport { firestore } from \"../../firebase\";\r\n\r\nclass Game extends Component {\r\n  state = {\r\n    difficulty: null,\r\n    isStopwatchRunning: false,\r\n    status: false,\r\n    runningTime: 0,\r\n    correctedArray: [],\r\n    numImages: 0,\r\n    winStatus: false,\r\n    scores: [],\r\n    subWinStatus: false\r\n  };\r\n\r\n  checkWinStatus = () => {\r\n    console.log(\"checking if you've won\");\r\n    if (this.state.winStatus === true) {\r\n      alert(\r\n        `You win! You finished difficulty level ${\r\n          this.state.difficulty.type\r\n        } in ${this.state.runningTime /\r\n          1000} seconds. Your score has been added to the leaderboard, click the leaderboard button to see where you stand...`\r\n      );\r\n      firestore\r\n        .collection(\"Leaderboard\")\r\n        .doc()\r\n        .set({\r\n          user: this.props.user.displayName,\r\n          difficulty: this.state.difficulty.type,\r\n          finishTime: this.state.runningTime\r\n        })\r\n        .then(() => {\r\n          console.log(\"Document successfully written!\");\r\n        })\r\n        .catch(function(error) {\r\n          console.error(\"Error writing document: \", error);\r\n        });\r\n      this.handleReset();\r\n    }\r\n  };\r\n\r\n  stopwatchStatus = status => {\r\n    this.setState({ isStopwatchRunning: status });\r\n  };\r\n\r\n  handleClick = () => {\r\n    let numImages = this.state.difficulty\r\n      ? this.state.difficulty.numImages\r\n      : this.state.numImages;\r\n\r\n    let correctedArray = [];\r\n    for (let index = 0; index < numImages; index++) {\r\n      correctedArray = correctedArray.concat(false);\r\n    }\r\n    this.setState({ correctedArray });\r\n    this.setState(state => {\r\n      if (state.status) {\r\n        clearInterval(state.timer);\r\n        this.stopwatchStatus(false);\r\n      } else {\r\n        this.stopwatchStatus(true);\r\n        const startTime = Date.now() - state.runningTime;\r\n        state.timer = setInterval(() => {\r\n          this.setState({ runningTime: Date.now() - startTime });\r\n        }, 100);\r\n      }\r\n      return { status: !state.status };\r\n    });\r\n  };\r\n\r\n  handleImageClick = () => {\r\n    console.log(\r\n      this.state.correctedArray.filter(booleanValue => booleanValue === false)\r\n        .length\r\n    );\r\n    let winStatus =\r\n      this.state.correctedArray.filter(booleanValue => booleanValue === false)\r\n        .length === 1\r\n        ? true\r\n        : false;\r\n    let subWinStatus =\r\n      this.state.correctedArray.filter(booleanValue => booleanValue === false)\r\n        .length === 0\r\n        ? true\r\n        : false;\r\n    this.setState({ winStatus, subWinStatus });\r\n    this.checkWinStatus();\r\n  };\r\n\r\n  handleReset = () => {\r\n    this.setState(\r\n      {\r\n        runningTime: 0,\r\n        status: true,\r\n        difficulty: null,\r\n        winStatus: false,\r\n        subWinStatus: false,\r\n        correctedArray: []\r\n      },\r\n      this.handleClick\r\n    );\r\n  };\r\n\r\n  render() {\r\n    let difficulties = [\r\n      { type: \"easy\", numImages: 5 },\r\n      { type: \"mediocre\", numImages: 25 },\r\n      { type: \"tough\", numImages: 50 },\r\n      { type: \"hard\", numImages: 100 },\r\n      { type: \"I've literally got all day\", numImages: 500 }\r\n    ];\r\n    let addButtons = difficulties.map((difficulty, index) => (\r\n      <Button\r\n        className={styles.button}\r\n        onClick={() => {\r\n          this.setState({ difficulty });\r\n        }}\r\n        text={difficulty.type}\r\n        key={index}\r\n      />\r\n    ));\r\n\r\n    let initializeGame = this.state.difficulty ? (\r\n      <div className={styles.buttons}>\r\n        <p className={styles.button}>\r\n          {Math.ceil(this.state.runningTime / 100) / 10}s\r\n        </p>\r\n        <button className={styles.button} onClick={this.handleClick}>\r\n          {this.state.status ? \"Pause\" : \"Start\"}\r\n        </button>\r\n        <button className={styles.button} onClick={this.handleReset}>\r\n          Play again?\r\n        </button>\r\n      </div>\r\n    ) : (\r\n      <>\r\n        <p>First, select your difficulty</p>\r\n        <section className={styles.buttons}>{addButtons}</section>\r\n      </>\r\n    );\r\n\r\n    let addImages =\r\n      this.state.difficulty &&\r\n      this.state.isStopwatchRunning &&\r\n      this.state.subWinStatus === false ? (\r\n        <section className={styles.mainContent}>\r\n          <Images\r\n            activate={this.activate}\r\n            user={this.props.user}\r\n            numImages={this.state.difficulty.numImages}\r\n            isActive={this.state.isActive}\r\n            correctedArray={this.state.correctedArray}\r\n            handleImageClick={this.handleImageClick}\r\n          />\r\n        </section>\r\n      ) : (\r\n        <section></section>\r\n      );\r\n\r\n    return (\r\n      <>\r\n        {initializeGame}\r\n        {addImages}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import UserInput from \"./UserInput\";\r\n\r\nexport default UserInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass UserInput extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <p> Please choose how many of your face you'd like to see</p>\r\n        <input type=\"number\" onChange={this.props.handleChange} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserInput;\r\n","import Hall from \"./Hall\";\r\n\r\nexport default Hall;\r\n","import React, { Component } from \"react\";\r\nimport UserInput from \"../../components/UserInput\";\r\nimport styles from \"./Hall.module.scss\";\r\nimport Images from \"../Images\";\r\n\r\nclass Hall extends Component {\r\n  render() {\r\n    let html =\r\n      this.props.numImages > 5000 ? (\r\n        <>\r\n          <section className={styles.form}>\r\n            <UserInput handleChange={this.props.setInputValue} />\r\n          </section>\r\n          <p>\r\n            Sorry, loading this many images takes too long. Please choose a\r\n            number less than or equal to 5000.\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <section className={styles.form}>\r\n            <UserInput handleChange={this.props.setInputValue} />\r\n          </section>\r\n          <section className={styles.mainContent}>\r\n            <Images user={this.props.user} numImages={this.props.numImages} />\r\n          </section>\r\n        </>\r\n      );\r\n    return <>{html}</>;\r\n  }\r\n}\r\n\r\nexport default Hall;\r\n","import Leaderboard from \"./Leaderboard\";\r\n\r\nexport default Leaderboard;\r\n","import React, { Component } from \"react\";\r\nimport { firestore } from \"../../firebase\";\r\nimport styles from \"./Leaderboard.module.scss\";\r\nimport Button from \"../../components/Button\";\r\n\r\nclass Leaderboard extends Component {\r\n  state = { scores: [], filteredScores: [], chosenDifficulty: null };\r\n  getScores = () => {\r\n    firestore\r\n      .collection(\"Leaderboard\")\r\n      .get()\r\n      .then(querySnapshot => {\r\n        let scores = querySnapshot.docs.map(doc => {\r\n          const scores = {\r\n            ...doc.data(),\r\n            docId: doc.id\r\n          };\r\n          return scores;\r\n        });\r\n        let orderedScores = scores.sort(function(a, b) {\r\n          return a.finishTime - b.finishTime;\r\n        });\r\n        this.setState({\r\n          scores: orderedScores\r\n        });\r\n      });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getScores();\r\n  }\r\n\r\n  leaderboardDifficulty = chosenDifficulty => {\r\n    let selectDifficulty = this.state.scores.filter(\r\n      score => score.difficulty === chosenDifficulty\r\n    );\r\n    this.setState({ filteredScores: selectDifficulty });\r\n  };\r\n\r\n  render() {\r\n    let difficulties = [\r\n      \"easy\",\r\n      \"mediocre\",\r\n      \"tough\",\r\n      \"hard\",\r\n      \"I've literally got all day\"\r\n    ];\r\n\r\n    let addButtons = difficulties.map((difficulty, index) => (\r\n      <Button\r\n        className={styles.button}\r\n        onClick={() => {\r\n          this.setState(\r\n            { chosenDifficulty: difficulty },\r\n            this.leaderboardDifficulty(difficulty)\r\n          );\r\n        }}\r\n        text={difficulty}\r\n        key={index}\r\n      />\r\n    ));\r\n\r\n    let instruction =\r\n      this.state.chosenDifficulty == null ? (\r\n        <p>Choose a difficulty to view scores for</p>\r\n      ) : (\r\n        <p>Select a different difficulty?</p>\r\n      );\r\n    return (\r\n      <>\r\n        {instruction}\r\n        <section className={styles.buttons}>{addButtons}</section>\r\n\r\n        {this.state.filteredScores.map((score, docId) => (\r\n          <section key={docId} className={styles.leaderboardRow}>\r\n            <p>{score.user}</p>\r\n            <p>{score.finishTime}</p>\r\n          </section>\r\n        ))}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Leaderboard;\r\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport Button from \"../../components/Button\";\nimport firebase, { provider } from \"../../firebase\";\nimport { globalHistory } from \"@reach/router\";\nimport styles from \"./App.module.scss\";\nimport { Link } from \"@reach/router\";\nimport { Router } from \"@reach/router\";\nimport Game from \"../Game/Game\";\nimport Hall from \"../Hall\";\nimport Leaderboard from \"../Leaderboard\";\n\nclass App extends React.Component {\n  state = { user: null, numImages: 0, rotation: 0 };\n  signIn = () => {\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(result => {\n        const user = result.user;\n        this.setState({ user: user });\n        globalHistory.navigate(\"/\");\n        // global history here tells the browser where to send you once logged in\n      })\n      .catch(error => console.log(error));\n  };\n\n  signInDefault = () => {\n    this.setState({\n      user: {\n        displayName: \"Unknown User\",\n        photoURL: require(\"../../images/default.jpg\")\n      }\n    });\n  };\n\n  setInputValue = event => {\n    this.setState({\n      numImages: event.target.value\n    });\n  };\n\n  render() {\n    let html =\n      this.state.user != null ? (\n        <section className={styles.welcome}>\n          <h1>Would you like to enter the Hall of Mirrors or play a game?</h1>\n          <section className={styles.buttons}>\n            <button>\n              <Link\n                to=\"/hall\"\n                style={{ textDecoration: \"none\", color: \"white\" }}\n              >\n                Enter the Hall\n              </Link>\n            </button>\n            <button>\n              <Link\n                style={{ textDecoration: \"none\", color: \"white\" }}\n                to=\"/game\"\n              >\n                Play the Game\n              </Link>\n            </button>\n            <button>\n              <Link\n                style={{ textDecoration: \"none\", color: \"white\" }}\n                to=\"/leaderboard\"\n              >\n                Leaderboard\n              </Link>\n            </button>\n          </section>\n          <Router>\n            <Hall\n              path=\"/hall\"\n              numImages={this.state.numImages}\n              user={this.state.user}\n              setInputValue={this.setInputValue}\n            />\n            <Game user={this.state.user} path=\"/game\" />\n            <Leaderboard path=\"leaderboard\" />\n          </Router>\n        </section>\n      ) : (\n        <section className={styles.logIn}>\n          <h1> You have to log in to access this website. </h1>\n          <div>\n            <Button onClick={this.signIn} text=\"Sign in\" />\n          </div>\n          <div>\n            <Button onClick={this.signInDefault} text=\"Enter as default user\" />\n          </div>\n        </section>\n      );\n\n    return <>{html}</>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"../src/Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttons\":\"Game_buttons__16Fy2\",\"button\":\"Game_button__20II3\",\"mainContent\":\"Game_mainContent__3zPC8\"};"],"sourceRoot":""}