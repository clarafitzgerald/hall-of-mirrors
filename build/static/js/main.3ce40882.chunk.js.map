{"version":3,"sources":["Containers/App/App.module.scss","Containers/Hall/Hall.module.scss","components/Login/Login.module.scss","components/Login/index.js","components/Login/Login.jsx","firebase.js","Containers/Game/Game.jsx","components/UserInput/index.js","components/UserInput/UserInput.jsx","components/Image/Image.jsx","Containers/Images/index.js","Containers/Images/Images.jsx","Containers/Hall/index.js","Containers/Hall/Hall.jsx","Containers/App/index.js","Containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","Login","className","styles","logIn","onClick","this","props","signIn","text","React","Component","firebase","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","provider","GoogleAuthProvider","Game","state","style","textAlign","display","marginLeft","to","textDecoration","color","backgroundColor","borderRadius","padding","margin","UserInput","type","onChange","handleChange","Image","rotationValue","randomNumber360","scale","randomNumber2","firstRandomNumber255","secondRandomNumber255","thirdRandomNumber255","randomRotation","numRows","Math","floor","sqrt","numImages","transformation","transform","width","height","src","alt","setState","Images","image","user","photoURL","randNum","max","ceil","random","innerHtml","index","push","key","Hall","html","form","setInputValue","mainContent","App","rotation","auth","signInWithPopup","then","result","globalHistory","navigate","catch","error","console","log","event","target","value","welcome","buttons","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3ce40882.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"logIn\":\"App_logIn__7Rynr\",\"welcome\":\"App_welcome__2EYGT\",\"buttons\":\"App_buttons__23GPN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContent\":\"Hall_mainContent__31o2l\",\"form\":\"Hall_form__1o01v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logIn\":\"Login_logIn__2lb50\"};","import Login from \"./Login\";\r\n\r\nexport default Login;\r\n","import React from \"react\";\r\nimport styles from \"./Login.module.scss\";\r\n\r\nclass Login extends React.Component {\r\n  render() {\r\n    return (\r\n      <button className={styles.logIn} onClick={this.props.signIn}>\r\n        {this.props.text}\r\n      </button>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import * as firebase from \"firebase/app\";\r\nimport \"firebase/firestore\";\r\nimport \"firebase/auth\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyAJ71l4tlltc5zr2VIFN3a92qU_qgbBvRE\",\r\n  authDomain: \"hall-of-mirrors-4ea96.firebaseapp.com\",\r\n  databaseURL: \"https://hall-of-mirrors-4ea96.firebaseio.com\",\r\n  projectId: \"hall-of-mirrors-4ea96\",\r\n  storageBucket: \"hall-of-mirrors-4ea96.appspot.com\",\r\n  messagingSenderId: \"554567970977\",\r\n  appId: \"1:554567970977:web:8a15a6f2b9fb3e3e8c00e0\",\r\n  measurementId: \"G-MPEPWF91N4\"\r\n};\r\n\r\n// Initialising firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\n// Exporting connection to database as a variable\r\nexport const firestore = firebase.firestore();\r\n\r\nexport const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\nexport default firebase;\r\n","import React, { Component } from \"react\";\r\nimport { Link } from \"@reach/router\";\r\n\r\nclass Game extends Component {\r\n  state = {};\r\n  render() {\r\n    return (\r\n      <>\r\n        <h1>The game is coming soon.</h1>\r\n        <p> Game ideas:</p>\r\n        <ul style={{ textAlign: \"left\", display: \"block\", marginLeft: \"20vw\" }}>\r\n          <li>\r\n            Image slowly turns, you have to click it before it gets to 180\r\n            degrees to save it. As soon as any die, you're out.\r\n          </li>\r\n          <li>\r\n            Include stopwatch - make all the images normal again in the quickest\r\n            time possible.\r\n          </li>\r\n        </ul>\r\n        <Link\r\n          to=\"/hall\"\r\n          style={{\r\n            textDecoration: \"none\",\r\n            color: \"white\",\r\n            backgroundColor: \"#56bc8a\",\r\n            borderRadius: \"20px\",\r\n            padding: \"10px\",\r\n            margin: \"10px\"\r\n          }}\r\n        >\r\n          Go to the hall instead\r\n        </Link>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import UserInput from \"./UserInput\";\r\n\r\nexport default UserInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass UserInput extends Component {\r\n  render() {\r\n    return (\r\n      <>\r\n        <p> Please choose how many of your face you'd like to see</p>\r\n        <input type=\"number\" onChange={this.props.handleChange} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default UserInput;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Image extends Component {\r\n  state = {\r\n    rotationValue: this.props.randomNumber360,\r\n    scale: this.props.randomNumber2,\r\n    color: `rgb(${this.props.firstRandomNumber255}, ${this.props.secondRandomNumber255}, ${this.props.thirdRandomNumber255})`\r\n  };\r\n\r\n  render() {\r\n    let resetTransformations = () => {\r\n      if (this.state.rotationValue !== 0) {\r\n        this.setState({ rotationValue: 0, scale: 1, color: \"transparent\" });\r\n      } else {\r\n        this.setState({\r\n          rotationValue: this.props.randomNumber360,\r\n          scale: this.props.randomNumber2,\r\n          color: `rgb(${this.props.firstRandomNumber255}, ${this.props.secondRandomNumber255}, ${this.props.thirdRandomNumber255})`\r\n        });\r\n      }\r\n    };\r\n\r\n    let randomRotation = `rotate(${this.state.rotationValue}deg)`;\r\n    let numRows = Math.floor(Math.sqrt(this.props.numImages));\r\n    // here I am finding the heighest square number less than my number of images, to obtain a reasonable number of rows for the required number of images to be set across\r\n    let width = `${(100 * numRows * this.state.scale) /\r\n      this.props.numImages}vh`;\r\n    // now I'm taking the full viewport width multiplied by the number of rows set across, and dividing this by the number of images I want in a row to obtain an appropriate viewport width for each image to take up\r\n    let height = \"auto\";\r\n    let transformation = {\r\n      transform: randomRotation,\r\n      width,\r\n      height\r\n    };\r\n\r\n    let color = {\r\n      backgroundColor: this.state.color\r\n    };\r\n\r\n    return (\r\n      <div style={color}>\r\n        <img\r\n          src={this.props.src}\r\n          alt=\"display\"\r\n          style={transformation}\r\n          onClick={resetTransformations}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Image;\r\n","import Images from \"./Images\";\r\n\r\nexport default Images;\r\n","import React, { Component } from \"react\";\r\nimport Image from \"../../components/Image/Image\";\r\n\r\nclass Images extends Component {\r\n  render() {\r\n    let image =\r\n      this.props.user !== null\r\n        ? this.props.user.photoURL\r\n        : \"../../images/default\";\r\n\r\n    let randNum = max => {\r\n      return Math.ceil(Math.random() * max);\r\n    };\r\n    let innerHtml = [];\r\n    for (let index = 0; index < this.props.numImages; index++) {\r\n      innerHtml.push(\r\n        <Image\r\n          src={image}\r\n          alt=\"display\"\r\n          key={index}\r\n          randomNumber360={randNum(360)}\r\n          randomNumber2={randNum(2)}\r\n          firstRandomNumber255={randNum(255)}\r\n          secondRandomNumber255={randNum(255)}\r\n          thirdRandomNumber255={randNum(255)}\r\n          numImages={this.props.numImages}\r\n        />\r\n      );\r\n    }\r\n    return <> {innerHtml}</>;\r\n  }\r\n}\r\n\r\nexport default Images;\r\n","import Hall from \"./Hall\";\r\n\r\nexport default Hall;\r\n","import React, { Component } from \"react\";\r\nimport UserInput from \"../../components/UserInput\";\r\nimport styles from \"./Hall.module.scss\";\r\nimport Images from \"../Images\";\r\n\r\nclass Hall extends Component {\r\n  render() {\r\n    let html =\r\n      this.props.numImages > 5000 ? (\r\n        <>\r\n          <section className={styles.form}>\r\n            <UserInput handleChange={this.props.setInputValue} />\r\n          </section>\r\n          <p>\r\n            Sorry, loading this many images takes too long. Please choose a\r\n            number less than or equal to 5000.\r\n          </p>\r\n        </>\r\n      ) : (\r\n        <>\r\n          <section className={styles.form}>\r\n            <UserInput handleChange={this.props.setInputValue} />\r\n          </section>\r\n          <section className={styles.mainContent}>\r\n            <Images user={this.props.user} numImages={this.props.numImages} />\r\n          </section>\r\n        </>\r\n      );\r\n    return <>{html}</>;\r\n  }\r\n}\r\n\r\nexport default Hall;\r\n","import App from \"./App\";\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport Login from \"../../components/Login\";\nimport firebase, { provider } from \"../../firebase\";\nimport { globalHistory } from \"@reach/router\";\nimport styles from \"./App.module.scss\";\nimport { Link } from \"@reach/router\";\nimport { Router } from \"@reach/router\";\nimport Game from \"../Game/Game\";\nimport Hall from \"../Hall\";\n\nclass App extends React.Component {\n  state = { user: null, numImages: 0, rotation: 0 };\n  signIn = () => {\n    firebase\n      .auth()\n      .signInWithPopup(provider)\n      .then(result => {\n        const user = result.user;\n        this.setState({ user: user });\n        globalHistory.navigate(\"/\");\n        // global history here tells the browser where to send you once logged in\n      })\n      .catch(error => console.log(error));\n  };\n\n  setInputValue = event => {\n    this.setState({\n      numImages: event.target.value\n    });\n  };\n\n  render() {\n    let html =\n      this.state.user != null ? (\n        <section className={styles.welcome}>\n          <h1>Would you like to enter the Hall of Mirrors or play a game?</h1>\n          <section className={styles.buttons}>\n            <button>\n              <Link\n                to=\"/hall\"\n                style={{ textDecoration: \"none\", color: \"white\" }}\n              >\n                Enter the Hall\n              </Link>\n            </button>\n            <button>\n              <Link\n                style={{ textDecoration: \"none\", color: \"white\" }}\n                to=\"/game\"\n              >\n                Play the Game\n              </Link>\n            </button>\n          </section>\n          <Router>\n            <Hall\n              path=\"/hall\"\n              numImages={this.state.numImages}\n              user={this.state.user}\n              setInputValue={this.setInputValue}\n            />\n            <Game path=\"/game\" user={this.state.user} />\n          </Router>\n        </section>\n      ) : (\n        <section className={styles.logIn}>\n          <h1> You have to log in to access this website. </h1>\n          <div>\n            <Login signIn={this.signIn} text=\"Sign in\" />\n          </div>\n        </section>\n      );\n\n    return <>{html}</>;\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"../src/Containers/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}